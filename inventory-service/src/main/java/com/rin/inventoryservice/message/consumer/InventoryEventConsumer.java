package com.rin.inventoryservice.message.consumer;

import com.rin.inventoryservice.entity.ReservedOrder;
import com.rin.inventoryservice.event.InventoryFailedEvent;
import com.rin.inventoryservice.event.InventoryReservedEvent;
import com.rin.inventoryservice.event.consumer.OrderCancelledEvent;
import com.rin.inventoryservice.event.consumer.OrderCreatedEvent;
import com.rin.inventoryservice.message.producer.InventoryEventProducer;
import com.rin.inventoryservice.repository.InventoryRepository;
import com.rin.inventoryservice.repository.ReservedOrderRepository;
import com.rin.inventoryservice.service.InventoryService;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
@FieldDefaults(level = lombok.AccessLevel.PRIVATE, makeFinal = true)
public class InventoryEventConsumer {

    InventoryService inventoryService;
    InventoryEventProducer inventoryEventProducer;
    InventoryRepository inventoryRepository;
    ReservedOrderRepository reservedOrderRepository;

    @Transactional
    @KafkaListener(
            topics = "orders",
            groupId = "inventory-service-order-created", // groupId chu·∫©n h√≥a
            containerFactory = "orderCreatedKafkaListenerContainerFactory" // C·∫ßn c·∫•u h√¨nh trong config class
    )
    public void handleOrderCreatedEvent(OrderCreatedEvent event) {
        System.out.println("üì• Nh·∫≠n OrderCreatedEvent: " + event);
        // X·ª≠ l√Ω s·ª± ki·ªán OrderCreatedEvent ·ªü ƒë√¢y
        try{
            int res = inventoryRepository.decreaseStockIfAvailable(event.getProductId(), event.getQuantity());
            if (res == 0) {
                throw new RuntimeException("S·ªë l∆∞·ª£ng h√†ng kh√¥ng ƒë·ªß ƒë·ªÉ gi·ªØ: " + event.getQuantity());
            }
            // L∆∞u th√¥ng tin ƒë∆°n h√†ng ƒë√£ gi·ªØ
            reservedOrderRepository.insertIfNotExists(event.getOrderId(), event.getProductId(), event.getQuantity());


            System.out.println("‚úÖ ƒê√£ gi·ªØ h√†ng cho ƒë∆°n h√†ng: " + event.getOrderId());
            inventoryEventProducer.publishInventoryReserved(
                    InventoryReservedEvent.builder()
                            .orderId(event.getOrderId())
                            .status("RESERVED")
                            .message("H√†ng ƒë√£ ƒë∆∞·ª£c gi·ªØ th√†nh c√¥ng.")
                            .build()
            );

        }catch (Exception e){
            System.out.println("‚ùå Gi·ªØ h√†ng th·∫•t b·∫°i cho ƒë∆°n h√†ng: " + event.getOrderId() + ", L·ªói: " + e.getMessage());
            inventoryEventProducer.publishInventoryFailed(
                    InventoryFailedEvent.builder()
                            .orderId(event.getOrderId())
                            .status("FAILED")
                            .message("Gi·ªØ h√†ng th·∫•t b·∫°i: " + e.getMessage())
                            .build()
            );
        }
    }
    @Transactional
    @KafkaListener(
            topics = "orders_cancelled",
            groupId = "inventory-service-order-cancelled", // groupId chu·∫©n h√≥a
            containerFactory = "orderCancelledKafkaListenerContainerFactory" // C·∫ßn c·∫•u h√¨nh trong config class
    )
    public void handleOrderCancelledEvent(OrderCancelledEvent event) {
        System.out.println("üì• Nh·∫≠n OrderCancelledEvent: " + event);
        // X·ª≠ l√Ω s·ª± ki·ªán OrderCancelledEvent ·ªü ƒë√¢y
        ReservedOrder reservedOrder = reservedOrderRepository.findByOrderIdAndProductId(event.getOrderId(), event.getProductId()).orElse(null);
        if(reservedOrder != null){
            // Ho√†n tr·∫£ h√†ng
            inventoryRepository.increaseStock(event.getProductId(), reservedOrder.getQuantity());
            // X√≥a th√¥ng tin ƒë∆°n h√†ng ƒë√£ gi·ªØ
            reservedOrderRepository.deleteByOrderIdAndProductId(event.getOrderId(), event.getProductId());

            System.out.println("‚úÖ ƒê√£ ho√†n tr·∫£ h√†ng cho ƒë∆°n h√†ng: " + event.getOrderId() +
                    ", productId: " + event.getProductId()+
                    ", quantity: " + event.getQuantity()+
                    ", reason: " + event.getReason());
        }else{
            // Bo qua
            System.out.println("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ƒë√£ gi·ªØ, b·ªè qua ho√†n tr·∫£ h√†ng cho ƒë∆°n h√†ng: " + event.getOrderId());
        }


    }
}
