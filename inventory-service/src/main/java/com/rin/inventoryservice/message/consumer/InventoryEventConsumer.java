package com.rin.inventoryservice.message.consumer;

import com.rin.inventoryservice.event.InventoryReservedEvent;
import com.rin.inventoryservice.event.consumer.OrderCreatedEvent;
import com.rin.inventoryservice.message.producer.InventoryEventProducer;
import com.rin.inventoryservice.service.InventoryService;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
@FieldDefaults(level = lombok.AccessLevel.PRIVATE, makeFinal = true)
public class InventoryEventConsumer {

    InventoryService inventoryService;
    InventoryEventProducer inventoryEventProducer;

    @KafkaListener(
            topics = "orders",
            groupId = "inventory-service-order-created", // groupId chu·∫©n h√≥a
            containerFactory = "orderCreatedKafkaListenerContainerFactory" // C·∫ßn c·∫•u h√¨nh trong config class
    )
    public void handleOrderCreatedEvent(OrderCreatedEvent event) {
        System.out.println("üì• Nh·∫≠n OrderCreatedEvent: " + event);
        // X·ª≠ l√Ω s·ª± ki·ªán OrderCreatedEvent ·ªü ƒë√¢y
        try{
            inventoryService.reserveInventory(event.getProductId(),  event.getQuantity());
            System.out.println("‚úÖ ƒê√£ gi·ªØ h√†ng cho ƒë∆°n h√†ng: " + event.getOrderId());
            inventoryEventProducer.publishInventoryReserved(
                    InventoryReservedEvent.builder()
                            .orderId(event.getOrderId())
                            .status("RESERVED")
                            .message("H√†ng ƒë√£ ƒë∆∞·ª£c gi·ªØ th√†nh c√¥ng.")
                            .build()
            );
        }catch (Exception e){
            System.out.println("‚ùå Gi·ªØ h√†ng th·∫•t b·∫°i cho ƒë∆°n h√†ng: " + event.getOrderId() + ", L·ªói: " + e.getMessage());
            inventoryEventProducer.publishInventoryFailed(
                    InventoryReservedEvent.builder()
                            .orderId(event.getOrderId())
                            .status("FAILED")
                            .message("Gi·ªØ h√†ng th·∫•t b·∫°i v√¨: " + e.getMessage())
                            .build()
            );
        }
    }
}
