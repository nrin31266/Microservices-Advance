services:
  redis:
    image: redis:latest
    container_name: redis_microservices
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
#    restart: always
    networks:
      - microservices-network
  kafka:
    image: confluentinc/cp-kafka:7.4.4
    container_name: kafka_microservices
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # ðŸ‘‡ Hai listener: 1 cho container ná»™i bá»™, 1 cho host ngoÃ i Docker
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - microservices-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    container_name: zookeeper_microservices
    ports:
      - "2181:2181"
    environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000
    networks:
      - microservices-network
  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.4
    container_name: schema_registry_microservices
    ports:
      - "9081:9081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:29092"
      SCHEMA_REGISTRY_HOST_NAME: "schema-registry"
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:9081"
    depends_on:
      - kafka
    networks:
      - microservices-network
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka_ui_microservices
    ports:
      - "9082:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
    volumes:
      - ./kui/config.yml:/etc/kafkaui/dynamic_config.yaml
    depends_on:
      - kafka
      - schema-registry
    networks:
      - microservices-network
  keycloak:
    image: quay.io/keycloak/keycloak:24.0.2
    container_name: keycloak_microservices
    command: start-dev
    ports:
      - "8080:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: root
      KC_DB_PASSWORD: root
      KC_DB_DATABASE: keycloak
    depends_on:
      - postgres
    networks:
      - microservices-network
  postgres:
    image: postgres:16
    container_name: postgres_microservices
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: main
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-network
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus_microservices
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped
    networks:
      - microservices-network
  grafana:
    image: grafana/grafana:latest
    container_name: grafana_microservices
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - microservices-network
#  mongo:
#    image: mongo:7.0
#    container_name: mongo_microservices
#    ports:
#      - "27017:27017"
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: root
#      MONGO_INITDB_ROOT_PASSWORD: root
#      MONGO_INITDB_DATABASE: main
#    volumes:
#      - mongo_data:/data/db
#    networks:
#      - microservices-network


volumes:
  postgres_data:
  grafana_data:
  mongo_data:

networks:
  microservices-network:
    driver: bridge